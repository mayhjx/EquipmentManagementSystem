@page
@model EquipmentManagementSystem.Pages.ReportSystem.ReportingModel
@{
    ViewData["Title"] = "报表系统";
}

<div class="card d-print-none">
    <div class="card-header">
        <h4>报表导出</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-12">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-row">
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.Category" class="control-label"></label>
                            <span asp-validation-for="Search.Category" class="text-danger"></span>
                            <select asp-for="Search.Category" class="custom-select" asp-items="@Html.GetEnumSelectList<EquipmentManagementSystem.Pages.ReportSystem.ReportingModel.Category>()">
                            </select>
                        </div>
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.BeginTime" class="control-label"></label>
                            <span asp-validation-for="Search.BeginTime" class="text-danger"></span>
                            <input asp-for="Search.BeginTime" class="form-control" />
                        </div>
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.EndTime" class="control-label"></label>
                            <span asp-validation-for="Search.EndTime" class="text-danger"></span>
                            <input asp-for="Search.EndTime" class="form-control" />
                        </div>
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.Platform" class="control-label"></label>
                            <span asp-validation-for="Search.Platform" class="text-danger"></span>
                            <select id="platform" asp-for="Search.Platform" asp-items="@Model.PlatformSelectList" class="custom-select select2">
                                <option value="">---请选择---</option>
                            </select>
                        </div>
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.Group" class="control-label"></label>
                            <span asp-validation-for="Search.Group" class="text-danger"></span>
                            <select id="group" asp-for="Search.Group" asp-items="@Model.GroupSelectList" class="custom-select select2">
                                <option value="">---请选择---</option>
                            </select>
                        </div>
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.Project" class="control-label"></label>
                            <span asp-validation-for="Search.Project" class="text-danger"></span>
                            <select id="project" asp-for="Search.Project" asp-items="@Model.ProjectSelectList" class="custom-select select2">
                                <option value="">---请选择---</option>
                            </select>
                        </div>
                        <div class="col-xl-auto col-sm-6 my-0">
                            <label asp-for="Search.Instrument" class="control-label"></label>
                            <span asp-validation-for="Search.Instrument" class="text-danger"></span>
                            <select id="instrument" asp-for="Search.Instrument" asp-items="@Model.InstrumentSelectList" class="custom-select select2">
                                <option value="">---请选择---</option>
                            </select>
                        </div>
                        <div class="col-xl-auto col-sm-6 pt-2">
                            <input type="submit" class="btn btn-primary mt-4 btn-block" value="查询" />
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@if (Model.UsageRecords != null)
{
    <div class="card">
        <div class="card-header d-print-none">
            <h3 class="card-title">
                <i class="fas fa-chart-bar mr-1"></i>
                查询结果
            </h3>
            <div class="card-tools">
                <ul class="nav nav-pills ml-auto">
                    <li class="nav-item">
                        <a class="nav-link " href="#data-chart" data-toggle="tab">图表</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#data" data-toggle="tab">数据</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="#data-grid" data-toggle="tab">使用记录表</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="card-body">
            <div class="tab-content p-0">
                <div class="chart tab-pane" id="data-chart" style="position: relative;">
                    <div class="chartjs-size-monitor">
                        <div class="chartjs-size-monitor-expand"><div class=""></div></div>
                        <div class="chartjs-size-monitor-shrink"><div class=""></div></div>
                    </div>
                </div>

                <div class="tab-pane " id="data" style="position: relative; ">
                    <div class="table-responsive">
                        <table id="export" class="table table-hover text-nowrap">
                            <thead>
                                <tr>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].InstrumentId)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].ProjectName)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].BeginTimeOfMaintain)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].BeginTimeOfTest)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].EndTime)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].SampleNumber)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].TestNumber)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.UsageRecords[0].Creator)
                                    </th>
                                    <th>维护时长(h)</th>
                                    <th>检测时长(h)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.UsageRecords)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.InstrumentId)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.ProjectName)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.BeginTimeOfMaintain)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.BeginTimeOfTest)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.EndTime)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.SampleNumber)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.TestNumber)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Creator)
                                        </td>
                                        <td>@((item.BeginTimeOfTest - item.BeginTimeOfMaintain).GetValueOrDefault().TotalHours.ToString("f1"))</td>
                                        <td class="time">@((item.EndTime - item.BeginTimeOfTest).GetValueOrDefault().TotalHours.ToString("f1"))</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td class="text-bold">总时长(h)</td>
                                    <td id="total" class="text-bold"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <div class="tab-pane active" id="data-grid" style="position: relative; ">
                    <button class="btn btn-outline-primary float-right no-print" style="margin-right:10px;" onclick="javascript:window.print()">
                        <i class="fa fa-print"></i> 打印
                    </button>
                    <table class="table table-sm table-borderless">
                        <thead>
                            <tr>
                                <th colspan="13" class=""><h4 class="text-center">色谱质谱联用设备使用通用记录表</h4></th>
                            </tr>
                            <tr>
                                <th colspan="13" class=""><h5 class="text-center">UHPLC, LC-MS/MS, GC-MS Use Form</h5></th>
                            </tr>
                            <tr>
                                <th colspan="7" class="">仪器编号：_____________ 仪器型号：_____________</th>
                                <th colspan="6" class="text-right">KM-SOP0314. ___ .01</th>
                            </tr>
                            <tr>
                                <th class="border border-dark">
                                    开始时间<br />
                                    Startup time
                                </th>
                                <th class="border border-dark">
                                    结束时间<br />
                                    Shutdown time
                                </th>
                                <th class="border border-dark">
                                    检测项目<br />
                                    Test Item
                                </th>
                                <th class="border border-dark">
                                    色谱柱编号/类型<br />
                                    Column Number
                                </th>
                                <th class="border border-dark">
                                    □流动相<br />
                                    Liquid Phase<br />
                                    □载气<br />
                                    Carrier Gas 
                                </th>
                                <th class="border border-dark">
                                    检测器<br />
                                    Detector
                                </th>
                                <th class="border border-dark">
                                    初始压力<br />
                                    □Psi<br />
                                    □Bar<br />
                                    □Mpa
                                </th>
                                <th class="border border-dark">
                                    离子源<br />
                                    Ion Source
                                </th>
                                <th class="border border-dark">
                                    真空度<br />
                                    □torr液质<br />
                                    □Mpa气质
                                </th>
                                <th class="border border-dark">
                                    空白<br />
                                    Blank
                                </th>
                                <th class="border border-dark">
                                    test信号<br />
                                    Test Signal
                                </th>
                                <th class="border border-dark">
                                    操作者<br />
                                    Operator
                                </th>
                                <th class="border border-dark">备注</th>
                            </tr>
                        </thead>
                        @{
                            var columnType = new Dictionary<char, string>();
                            var carrier = new Dictionary<char, string>();
                            var ionSource = new Dictionary<char, string>();
                            var detector = new Dictionary<char, string>();
                            char index = (char)65;

                            foreach (var item in Model.UsageRecords)
                            {
                                if (!columnType.ContainsValue(item.Project.ColumnType))
                                {
                                    columnType.Add(index, item.Project.ColumnType);
                                    carrier.Add(index, item.Project.Carrier);
                                    ionSource.Add(index, item.Project.IonSource);
                                    detector.Add(index, item.Project.Detector);
                                    index++;
                                }
                            }

                            string GetKeyFromValue(Dictionary<char, string> dic, string value)
                            {
                                string key = string.Empty;
                                foreach (KeyValuePair<char, string> kvp in dic)
                                {
                                    if (kvp.Value == value)
                                    {
                                        return kvp.Key.ToString();
                                    }
                                }
                                return key;
                            }
                        }
                        <tfoot>
                            <tr>
                                <td colspan="13" class="border border-dark">
                                    备注：
                                    <ol>
                                        <li>
                                            色谱柱类型：@string.Join(" ", columnType).Replace('[', ' ').Replace(']', ' ').Replace(',', '.')
                                        </li>
                                        <li>
                                            流动相/载气类型：@string.Join(" ", carrier).Replace('[', ' ').Replace(']', ' ').Replace(',', '.')
                                        </li>
                                        <li>
                                            离子源类型：@string.Join(" ", ionSource).Replace('[', ' ').Replace(']', ' ').Replace(',', '.')
                                        </li>
                                        <li>
                                            检测器类型：@string.Join(" ", detector).Replace('[', ' ').Replace(']', ' ').Replace(',', '.')
                                        </li>
                                    </ol>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="13" class="text-center border border-dark">
                                    使用回顾
                                </td>
                            </tr>
                            <tr>
                                <td class="border border-dark">评估意见</td>
                                <td colspan="4" class="border border-dark"></td>
                                <td class="border border-dark">评估人/日期</td>
                                <td colspan="3" class="border border-dark"></td>
                                <td class="border border-dark">审批人/日期</td>
                                <td colspan="3" class="border border-dark"></td>
                            </tr>
                        </tfoot>
                        <tbody>
                            @foreach (var item in Model.UsageRecords)
                            {
                                <tr>
                                    <td class="border border-dark">@item.BeginTimeOfTest</td>
                                    <td class="border border-dark">@item.EndTime</td>
                                    <td class="border border-dark">@item.ProjectName</td>
                                    <td class="border border-dark">@item.ColumnNumber @item.ColumnTwoNumber / @GetKeyFromValue(columnType, item.Project.ColumnType)</td>
                                    <td class="border border-dark">@GetKeyFromValue(carrier, item.Project.Carrier)</td>
                                    <td class="border border-dark">@GetKeyFromValue(detector, item.Project.Detector)</td>
                                    <td class="border border-dark">@item.ColumnPressure @item.ColumnTwoPressure </td>
                                    <td class="border border-dark">@GetKeyFromValue(ionSource, item.Project.IonSource)</td>
                                    <td class="border border-dark">@item.VacuumDegree</td>
                                    <td class="border border-dark">@item.BlankSignal</td>
                                    <td class="border border-dark">@item.TestSignal</td>
                                    <td class="border border-dark">@item.Creator</td>
                                    <td class="border border-dark">@item.Remark</td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <link href="~/plugins/datatables-buttons/css/buttons.bootstrap4.min.css" rel="stylesheet" />
    <script src="~/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/plugins/jszip/jszip.min.js"></script>
    <script src="~/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/plugins/chart.js/Chart.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            @{
                var date = new List<string>();
                double time = 0;
                double totalTime = 0;
                var instrument = new Dictionary<string, List<double>>();
                if (Model.UsageRecords != null)
                {
                    foreach (var item in Model.UsageRecords)
                    {
                        var beginTime = item.BeginTimeOfTest.GetValueOrDefault().ToShortDateString();
                        if (!date.Contains(beginTime))
                        {
                            date.Add(beginTime);

                        }
                        time = Math.Round((item.EndTime - item.BeginTimeOfTest).GetValueOrDefault().TotalHours,1);
                        totalTime += time;

                        try
                        {
                            instrument[item.InstrumentId].Add(time);
                        }
                        catch(KeyNotFoundException)
                        {
                            instrument.Add(item.InstrumentId, new List<double>() { time});
                        }
                    }
                }
            }
            let dic = @(Json.Serialize(instrument));
            var div = document.getElementById('data-chart');

            if (Object.keys(dic).length == 0) {
                div.innerHTML = "<p>未查询到数据！</p>";
                return;
            }

            for (let key in dic) {
                var canvas = document.createElement("canvas");
                var br = document.createElement("br");

                canvas.height = "275";
                canvas.width = "900";

                div.appendChild(canvas);
                canvas.append("<p>当前浏览器不支持查看该元素！</p>");
                div.appendChild(br);

                var ctx = canvas.getContext('2d');
                var chart = new Chart(ctx, {
                // The type of chart we want to create
                type: 'bar',

                // The data for our dataset
                data: {

                    labels: @Json.Serialize(date),
                    datasets: [{
                        label: key + ' 使用时长',
                        backgroundColor: 'rgb(65, 105, 225)',
                        borderColor: 'rgb(65, 105, 225)',
                        data: dic[key],
                    }]
                    },
                    // Configuration options go here
                    options: {
                        scales: {
                            xAxes: [{
                                type: 'time',
                                time: {
                                    unit: "day",
                                    displayFormats: {
                                        day: "YYYY-MM-DD"
                                    }
                                },
                            }],
                            yAxes: [{
                                ticks: {
                                    max: 24,
                                    beginAtZero: false
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "小时",
                                }
                            }]
                        }
                    }
                });
            };
        });

        $(document).ready(function () {
            // 动态生成检测项目
            $("select#group").on("change", function () {
                var group = $(this).val();
                $("select#project").removeAttr("disabled");
                $("select#project").empty();
                $("select#project").append("<option value=''>---请选择---</option>");
                $.getJSON(`?handler=ProjectFilter&group=${group}`, (data) => {
                    $.each(data, function (i, item) {
                        if (item.length > 0) {
                            $("select#project").append(`<option value='${item}'>${item}</option>`);
                        }
                        else {
                            $("select#project").empty();
                            $("select#project").append("<option value=''>无可选项目</option>");
                        }
                    });
                });
            });

            // 动态生成设备编号
            $("select#project").on("change", function () {
                var project = $(this).val();
                $("select#instrument").removeAttr("disabled");
                $("select#instrument").empty();
                $("select#instrument").append("<option value=''>---请选择---</option>");
                $.getJSON(`?handler=InstrumentFilter&projectName=${project}`, (data) => {
                    $.each(data, function (i, item) {
                        if (item.length > 0) {
                            $("select#instrument").append(`<option value='${item}'>${item}</option>`);
                        }
                        else {
                            $("select#instrument").empty();
                            $("select#instrument").append("<option value=''>无可选设备</option>");
                        }
                    });
                });
            });

            $('table#export').DataTable({
                dom: "irtpB",
                language: {
                    "emptyTable": "没有数据", //没有数据时要显示的字符串
                    "info": "当前 _START_ 条到 _END_ 条 共 _TOTAL_ 条",//左下角的信息，变量可以自定义，到官网详细查看
                    "infoEmpty": "无记录",//当没有数据时，左下角的信息
                    "infoFiltered": "(从 _MAX_ 条记录过滤)",//当表格过滤的时候，将此字符串附加到主要信息
                    "infoPostFix": "",//在摘要信息后继续追加的字符串
                    "thousands": ",",//千分位分隔符
                    "lengthMenu": "每页 _MENU_ 条记录",//用来描述分页长度选项的字符串
                    "loadingRecords": "加载中...",//用来描述数据在加载中等待的提示字符串 - 当异步读取数据的时候显示
                    "processing": "处理中...",//用来描述加载进度的字符串
                    "search": "搜索：",//用来描述搜索输入框的字符串
                    "zeroRecords": "没有找到",//当没有搜索到结果时，显示
                    "paginate": {
                        "first": "首页",
                        "previous": "上一页",
                        "next": "下一页",
                        "last": "尾页"
                    }
                },
                buttons: [{
                    extend: 'excel',
                    text: '导出',
                    footer: true,
                    filename: "@(Model.Search.Category)-@(Model.Search?.BeginTime.ToShortDateString())_@(Model.Search?.EndTime.ToShortDateString())"
                }]
            });

            // 计算总时长
            $("td#total").text(@totalTime.ToString("f1"));
        });
    </script>
}

@*@if (Model.MalfunctionWorkOrders != null)
    {
        <table id="export" class="table table-hover text-nowrap">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].InstrumentID)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].MalfunctionInfo.Part)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].MalfunctionInfo.Phenomenon)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].MalfunctionInfo.BeginTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].MalfunctionInfo.FoundedTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].RepairRequest.RequestTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].Maintenance.BeginTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MalfunctionWorkOrders[0].Validation.FinishedTime)
                    </th>
                    <th>维修耗时(h)</th>
                    <th>故障时长(h)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.MalfunctionWorkOrders)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.InstrumentID)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MalfunctionInfo.Part)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MalfunctionInfo.Phenomenon)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MalfunctionInfo.BeginTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MalfunctionInfo.FoundedTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.RepairRequest.RequestTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Maintenance.BeginTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Validation.FinishedTime)
                        </td>
                        <td>@((item.Maintenance.EndTime - item.Maintenance.BeginTime).GetValueOrDefault().TotalHours.ToString("f1"))</td>
                        <td class="time">@((item.Validation.FinishedTime - item.MalfunctionInfo.BeginTime).GetValueOrDefault().TotalHours.ToString("f1"))</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td class="text-bold">总时长(h)</td>
                    <td id="total" class="text-bold"></td>
                </tr>
            </tfoot>
        </table>
    }*@
