// <auto-generated />
using System;
using EMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201120085441_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EMS.Core.Entities.AcceptanceAggregate.Acceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BusinessLicenseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentAcceptanceReportId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentCalibrationReportId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentCertificateId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentFilesListId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvaluationReportId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FactoryAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FactoryAcceptanceRemark")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("FactoryAcceptanceReportId")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryProductionLicenseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstallationNoteId")
                        .HasColumnType("int");

                    b.Property<string>("InstallationRemark")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("InventoryCertificateId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryRemark")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsAcceptance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEngineerAssistance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFactoryAcceptance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInventoryComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfBuilt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainingUseAndMaintenance")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ItemAcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MedicalDeviceRegistrationCertificateId")
                        .HasColumnType("int");

                    b.Property<string>("MethodConstructionRemark")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("ServiceReportId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingSignInFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessLicenseId");

                    b.HasIndex("EquipmentAcceptanceReportId");

                    b.HasIndex("EquipmentCalibrationReportId");

                    b.HasIndex("EquipmentCertificateId");

                    b.HasIndex("EquipmentFilesListId");

                    b.HasIndex("EquipmentResumeId");

                    b.HasIndex("EvaluationReportId");

                    b.HasIndex("FactoryAcceptanceReportId");

                    b.HasIndex("FactoryProductionLicenseId");

                    b.HasIndex("InstallationNoteId");

                    b.HasIndex("InstrumentId")
                        .IsUnique();

                    b.HasIndex("InventoryCertificateId");

                    b.HasIndex("MedicalDeviceRegistrationCertificateId");

                    b.HasIndex("ServiceReportId");

                    b.HasIndex("TrainingSignInFormId");

                    b.ToTable("Acceptances");
                });

            modelBuilder.Entity("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcceptanceUploadFile");
                });

            modelBuilder.Entity("EMS.Core.Entities.CalibrationAggregate.Calibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Calibrations");
                });

            modelBuilder.Entity("EMS.Core.Entities.CalibrationAggregate.CalibrationUploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalibrationId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationId")
                        .IsUnique();

                    b.ToTable("CalibrationUploadFile");
                });

            modelBuilder.Entity("EMS.Core.Entities.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("EMS.Core.Entities.GroupAggregate.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EMS.Core.Entities.GroupAggregate.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EMS.Core.Entities.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalibrationCycle")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MetrologicalCharacteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NewSystemCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PersonInCharge")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("StartUsingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("EMS.Core.Entities.UsageRecordAggregate.UsageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchSampleNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Blank")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ClinicSampleNumber")
                        .HasColumnType("int");

                    b.Property<string>("Column")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ColumnType")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("MobilePhase")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Test")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("VacuumDegree")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.ToTable("UsageRecords");
                });

            modelBuilder.Entity("EMS.Core.Entities.AcceptanceAggregate.Acceptance", b =>
                {
                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "BusinessLicense")
                        .WithMany()
                        .HasForeignKey("BusinessLicenseId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "EquipmentAcceptanceReport")
                        .WithMany()
                        .HasForeignKey("EquipmentAcceptanceReportId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "EquipmentCalibrationReport")
                        .WithMany()
                        .HasForeignKey("EquipmentCalibrationReportId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "EquipmentCertificate")
                        .WithMany()
                        .HasForeignKey("EquipmentCertificateId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "EquipmentFilesList")
                        .WithMany()
                        .HasForeignKey("EquipmentFilesListId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "EquipmentResume")
                        .WithMany()
                        .HasForeignKey("EquipmentResumeId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "EvaluationReport")
                        .WithMany()
                        .HasForeignKey("EvaluationReportId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "FactoryAcceptanceReport")
                        .WithMany()
                        .HasForeignKey("FactoryAcceptanceReportId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "FactoryProductionLicense")
                        .WithMany()
                        .HasForeignKey("FactoryProductionLicenseId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "InstallationNote")
                        .WithMany()
                        .HasForeignKey("InstallationNoteId");

                    b.HasOne("EMS.Core.Entities.Instrument", "Instrument")
                        .WithOne("InstrumentAssecptance")
                        .HasForeignKey("EMS.Core.Entities.AcceptanceAggregate.Acceptance", "InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "InventoryCertificate")
                        .WithMany()
                        .HasForeignKey("InventoryCertificateId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "MedicalDeviceRegistrationCertificate")
                        .WithMany()
                        .HasForeignKey("MedicalDeviceRegistrationCertificateId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "ServiceReport")
                        .WithMany()
                        .HasForeignKey("ServiceReportId");

                    b.HasOne("EMS.Core.Entities.AcceptanceAggregate.AcceptanceUploadFile", "TrainingSignInForm")
                        .WithMany()
                        .HasForeignKey("TrainingSignInFormId");
                });

            modelBuilder.Entity("EMS.Core.Entities.CalibrationAggregate.Calibration", b =>
                {
                    b.HasOne("EMS.Core.Entities.Instrument", "Instrument")
                        .WithMany("Calibrations")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMS.Core.Entities.CalibrationAggregate.CalibrationUploadFile", b =>
                {
                    b.HasOne("EMS.Core.Entities.CalibrationAggregate.Calibration", "Calibration")
                        .WithOne("UploadFile")
                        .HasForeignKey("EMS.Core.Entities.CalibrationAggregate.CalibrationUploadFile", "CalibrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMS.Core.Entities.Component", b =>
                {
                    b.HasOne("EMS.Core.Entities.Instrument", "Instrument")
                        .WithMany("Components")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMS.Core.Entities.GroupAggregate.Project", b =>
                {
                    b.HasOne("EMS.Core.Entities.GroupAggregate.Group", "Group")
                        .WithMany("Projects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.Core.Entities.Instrument", "Instrument")
                        .WithMany("Projects")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMS.Core.Entities.Instrument", b =>
                {
                    b.HasOne("EMS.Core.Entities.GroupAggregate.Group", "Group")
                        .WithMany("Instruments")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("EMS.Core.Entities.UsageRecordAggregate.UsageRecord", b =>
                {
                    b.HasOne("EMS.Core.Entities.Instrument", null)
                        .WithMany("UsageRecords")
                        .HasForeignKey("InstrumentId");
                });
#pragma warning restore 612, 618
        }
    }
}
