// <auto-generated />
using System;
using EquipmentManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EquipmentManagementSystem.Migrations
{
    [DbContext(typeof(EquipmentContext))]
    partial class EquipmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("EquipmentManagementSystem.Models.Assert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUnit")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("instrumentId")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("instrumentId")
                        .IsUnique();

                    b.ToTable("Assert");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Calibration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Calibrator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("InstrumentID");

                    b.ToTable("Calibration");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Component", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("instrumentID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("instrumentID");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Computer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstrumentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("InstrumentID");

                    b.ToTable("Computer");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Instrument", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<int>("CalibrationCycle")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("MetrologicalCharacteristics")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int?>("ProjectTeamID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT")
                        .HasMaxLength(999);

                    b.Property<DateTime>("StartUsingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ProjectTeamID");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Malfunction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessoriesArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("DebuggingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("EngineerArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FollowUpPeople")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("FoundTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOrderTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Solutions")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTrackTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("componentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("componentID");

                    b.ToTable("Malfunction");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("ProjectTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("instrumentID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("projectTeamID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("instrumentID");

                    b.HasIndex("projectTeamID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.ProjectTeam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("ProjectTeam");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Assert", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.Instrument", "instrument")
                        .WithOne("assert")
                        .HasForeignKey("EquipmentManagementSystem.Models.Assert", "instrumentId");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Calibration", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.Instrument", "instrument")
                        .WithMany("calibrations")
                        .HasForeignKey("InstrumentID");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Component", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.Instrument", "instrument")
                        .WithMany("components")
                        .HasForeignKey("instrumentID");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Computer", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.Instrument", "instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Instrument", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.ProjectTeam", null)
                        .WithMany("instruments")
                        .HasForeignKey("ProjectTeamID");
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Malfunction", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.Component", "component")
                        .WithMany("malfunctions")
                        .HasForeignKey("componentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentManagementSystem.Models.Project", b =>
                {
                    b.HasOne("EquipmentManagementSystem.Models.Instrument", "instrument")
                        .WithMany("Projects")
                        .HasForeignKey("instrumentID");

                    b.HasOne("EquipmentManagementSystem.Models.ProjectTeam", "projectTeam")
                        .WithMany("Projects")
                        .HasForeignKey("projectTeamID");
                });
#pragma warning restore 612, 618
        }
    }
}
